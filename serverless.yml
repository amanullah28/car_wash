service: car-washer
frameworkVersion: '2'

plugins: 
  - serverless-offline

# custom:
#   allowedHeaders:
#     - Accept
#     - Content-Type
#     - Content-Length
#     - Authorization
#     - X-Amz-Date
#     - X-Api-Key
#     - X-Amz-Security-Token
#     - X-Amz-User-Agent
#     - app_user_id
#     - app_user_name

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-1
  stage: dev
  memorySize: 256
  timeout: 10
  endpointType: regional
  environment:
    USER_TABLE: user
    IMAGE_BUCKET: car-washer
    JWT_SECRET: secretttt
    # USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - "s3:*"

      Resource: 
          - arn:aws:dynamodb:us-east-1:*:*
          - arn:aws:lambda:us-east-1:*:*
          - arn:aws:s3:::${self:provider.environment.IMAGE_BUCKET}/*

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    S3Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: car-washer

functions:
  add-washer:
    handler: services/add-washer.handler
    description: POST/washer-registration
    events: 
      - http: 
          path: washer
          method: post
          cors: true
          # cors:
          #   origin: '*'
          #   headers: ${self:custom.allowedHeaders}

  washer-login:
    handler: services/washer-login.handler
    description: POST/washer-login
    events: 
      - http: 
          path: washer-login
          method: post
          cors: true
          # cors:
          #   origin: '*'
          #   headers: ${self:custom.allowedHeaders}

  authorizerFn:
    handler: services/jwt-authorizer.handler

  image-upload:
    handler: services/image-upload.handler
    description: POST/image-upload
    events: 
      - http:
          path: upload/{folder}
          method: post
          cors: true
            # cors:
            #origin: '*'
            #headers: ${self:custom.allowedHeaders}
          authorizer:
            type: TOKEN
            name: authorizerFn
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
    


